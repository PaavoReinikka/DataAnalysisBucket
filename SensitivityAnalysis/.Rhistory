View(ss)
rank_sobol(ss,ties='max')
res <- rank_sobol(ss,ties='max')
res <- rank_sobol(ss,ties='min')
res
min(res[,1])
min(res[,2])
rank(1/res)
rank(1/res[,1])
res[,1] <- rank(1/res[,1])
res
res[,2] <- rank(1/res[,2])
res
res <- rank_sobol(ss,ties='max')
res
res <- rank_sobol(ss,ties='min')
res
rank_sobol <- function(ss, ties = 'min', coef_names = NULL, scale = T, file_out = NULL) {
#' @title Function for calculating ranks for sobol indices, such as they are when produced by SA_sobol.
#' @description rank_sobol works in a similar way as rank_coefs, but needs SA_sobol$data as input.
#' @param coef_names An additional parameter for choosing either subsets or changing the order of variables.
#' This might be useful if SA_sobol is originally run with different ordering for plotting/subsetting purposes.
#' @return Data frame of ranks, or outputs to separate files for 1st and total order inices.
if(is.null(coef_names)) coef_names <- names(ss)[-c(1,2)]
dss <- apply(ss[,coef_names] %>% abs(),1,
function(data) {
r <- rank(data, ties.method = ties)
if(ties == 'max' & scale) r - min(r) else {
rank(1/r)
}
}) %>% as.data.frame()
colnames(dss) <- paste(ss$Index, ss$Lambda)
if(is.null(file_out)) dss else {
file_1 <- paste(file_out, '_S1_RANKS.csv', sep='')
file_2 <- paste(file_out, '_ST_RANKS.csv', sep='')
ind <- 1:ncol(dss)
ds1 <- dss[,-which(ind%%2==0)]
ds2 <- dss[,which(ind%%2==0)]
write.csv(ds1, file = file_1, row.names = T)
write.csv(ds2, file = file_2, row.names = T)
}
}
res <- rank_sobol(ss,ties='min')
res
ss <- read.csv('SA_results/0.25_Sobol_1000.csv')
res <- rank_sobol(ss,ties='min')
res
res[,1] %>% unique()
res[,1] %>% unique() %>% sort()
res[,1]
rank_sobol <- function(ss, ties = 'min', coef_names = NULL, scale = T, file_out = NULL) {
#' @title Function for calculating ranks for sobol indices, such as they are when produced by SA_sobol.
#' @description rank_sobol works in a similar way as rank_coefs, but needs SA_sobol$data as input.
#' @param coef_names An additional parameter for choosing either subsets or changing the order of variables.
#' This might be useful if SA_sobol is originally run with different ordering for plotting/subsetting purposes.
#' @return Data frame of ranks, or outputs to separate files for 1st and total order inices.
if(is.null(coef_names)) coef_names <- names(ss)[-c(1,2)]
dss <- apply(ss[,coef_names] %>% abs(),1,
function(data) {
r <- rank(data, ties.method = ties)
rank(1/rank)
#if(ties == 'max' & scale) r - min(r) else {
#  rank(1/r)
#}
}) %>% as.data.frame()
colnames(dss) <- paste(ss$Index, ss$Lambda)
if(is.null(file_out)) dss else {
file_1 <- paste(file_out, '_S1_RANKS.csv', sep='')
file_2 <- paste(file_out, '_ST_RANKS.csv', sep='')
ind <- 1:ncol(dss)
ds1 <- dss[,-which(ind%%2==0)]
ds2 <- dss[,which(ind%%2==0)]
write.csv(ds1, file = file_1, row.names = T)
write.csv(ds2, file = file_2, row.names = T)
}
}
res <- rank_sobol(ss,ties='min')
rank_sobol <- function(ss, ties = 'min', coef_names = NULL, scale = T, file_out = NULL) {
#' @title Function for calculating ranks for sobol indices, such as they are when produced by SA_sobol.
#' @description rank_sobol works in a similar way as rank_coefs, but needs SA_sobol$data as input.
#' @param coef_names An additional parameter for choosing either subsets or changing the order of variables.
#' This might be useful if SA_sobol is originally run with different ordering for plotting/subsetting purposes.
#' @return Data frame of ranks, or outputs to separate files for 1st and total order inices.
if(is.null(coef_names)) coef_names <- names(ss)[-c(1,2)]
dss <- apply(ss[,coef_names] %>% abs(),1,
function(data) {
r <- rank(data, ties.method = ties)
rank(1/r)
#if(ties == 'max' & scale) r - min(r) else {
#  rank(1/r)
#}
}) %>% as.data.frame()
colnames(dss) <- paste(ss$Index, ss$Lambda)
if(is.null(file_out)) dss else {
file_1 <- paste(file_out, '_S1_RANKS.csv', sep='')
file_2 <- paste(file_out, '_ST_RANKS.csv', sep='')
ind <- 1:ncol(dss)
ds1 <- dss[,-which(ind%%2==0)]
ds2 <- dss[,which(ind%%2==0)]
write.csv(ds1, file = file_1, row.names = T)
write.csv(ds2, file = file_2, row.names = T)
}
}
res <- rank_sobol(ss,ties='min')
res
write.csv(res,'DEMO.csv')
res <- rank_sobol(ss,ties='max')
res
write.csv(res,'DEMO.csv')
rank_sobol <- function(ss, ties = 'min', coef_names = NULL, scale = T, file_out = NULL) {
#' @title Function for calculating ranks for sobol indices, such as they are when produced by SA_sobol.
#' @description rank_sobol works in a similar way as rank_coefs, but needs SA_sobol$data as input.
#' @param coef_names An additional parameter for choosing either subsets or changing the order of variables.
#' This might be useful if SA_sobol is originally run with different ordering for plotting/subsetting purposes.
#' @return Data frame of ranks, or outputs to separate files for 1st and total order inices.
if(is.null(coef_names)) coef_names <- names(ss)[-c(1,2)]
dss <- apply(ss[,coef_names] %>% abs(),1,
function(data) {
r <- rank(data, ties.method = ties)
rank(100/r)
#if(ties == 'max' & scale) r - min(r) else {
#  rank(1/r)
#}
}) %>% as.data.frame()
colnames(dss) <- paste(ss$Index, ss$Lambda)
if(is.null(file_out)) dss else {
file_1 <- paste(file_out, '_S1_RANKS.csv', sep='')
file_2 <- paste(file_out, '_ST_RANKS.csv', sep='')
ind <- 1:ncol(dss)
ds1 <- dss[,-which(ind%%2==0)]
ds2 <- dss[,which(ind%%2==0)]
write.csv(ds1, file = file_1, row.names = T)
write.csv(ds2, file = file_2, row.names = T)
}
}
res <- rank_sobol(ss,ties='max')
res
write.csv(res,'DEMO.csv')
x <- res[,4]
x
order(x)
sort(x)
rank_sobol <- function(ss, ties = 'min', coef_names = NULL, scale = T, file_out = NULL) {
#' @title Function for calculating ranks for sobol indices, such as they are when produced by SA_sobol.
#' @description rank_sobol works in a similar way as rank_coefs, but needs SA_sobol$data as input.
#' @param coef_names An additional parameter for choosing either subsets or changing the order of variables.
#' This might be useful if SA_sobol is originally run with different ordering for plotting/subsetting purposes.
#' @return Data frame of ranks, or outputs to separate files for 1st and total order inices.
if(is.null(coef_names)) coef_names <- names(ss)[-c(1,2)]
dss <- apply(ss[,coef_names] %>% abs(),1,
function(data) {
r <- rank(-data, ties.method = ties)
#if(ties == 'max' & scale) r - min(r) else {
#  rank(1/r)
#}
}) %>% as.data.frame()
colnames(dss) <- paste(ss$Index, ss$Lambda)
if(is.null(file_out)) dss else {
file_1 <- paste(file_out, '_S1_RANKS.csv', sep='')
file_2 <- paste(file_out, '_ST_RANKS.csv', sep='')
ind <- 1:ncol(dss)
ds1 <- dss[,-which(ind%%2==0)]
ds2 <- dss[,which(ind%%2==0)]
write.csv(ds1, file = file_1, row.names = T)
write.csv(ds2, file = file_2, row.names = T)
}
}
res <- rank_sobol(ss,ties='max')
res
write.csv(res,'DEMO.csv')
res <- rank_sobol(ss,ties='min')
res
################### Function for ranking model coefficient for different pairs (alpha, lambda) ###################
rank_coefs <- function(df_x, df_y, alphas = NULL, lambdas = NULL, ties = 'min', scale = T, file_out = NULL, folds = 10) {
#' @title Function for calculating ranks for glmnet models.
#' @description Ranks glmnet model coefficients. If ties == 'max' & scale == TRUE, the results are scaled so as to
#' make zero coefficients have rank zero, and the most significant coefficient have the rank equaling the number of non-zero coeffs.
#' @param df_x/df_y Clean data frames or matrices.
#' @param alphas Values of elasticnet metaparam. If no values are provided, cv is used to find
#' a value.
#' @param lambdas Values for elasticnet param. for shrinkage. Defaults to cv {0, min, 1se}.
#' @param ties How rank( ) function should handle ties.
#' @param scale If ties == max, scale decides whether or not the results are scaled so that least values -> 0.
#' @param file_out Name tag for .csv file where the results are saved.
#' @return Data frame of ranks, or outputs to a file.
x <- if(is.data.frame(df_x)) df_x %>% as.matrix() else df_x
y <- if(is.data.frame(df_y)) df_y %>% as.matrix() else df_y
alphas <- if(is.null(alphas)) {
require(glmnetUtils)
cat('Using cva.glmnet for finding alpha. Criteria used: min(cvm).')
fit <- cva.glmnet(x, y)
min <- Inf
ind <- NULL
for (i in 1:length(fit$modlist)) {
new <- min(fit$modlist[[i]]$cvm)
if(new<min) {
min <- new
ind <- i
}
}
fit$alpha[ind]
} else alphas
res <- foreach(i=alphas, .combine = 'cbind') %do% {
cv.fit <- cv.glmnet(x, y, alpha = i, nfolds = folds)
l <- if(is.null(lambdas)) {
c(0, cv.fit$lambda.min, cv.fit$lambda.1se)
} else if(is.integer(lambdas) & length(lambdas)<=3) {
c(0, cv.fit$lambda.min, cv.fit$lambda.1se)[lambdas]
} else lambdas
foreach(k=l, .combine = 'cbind') %do% {
mdl <- glmnet(x,y,alpha=i, lambda=k)
tmp <- data.frame(coef(mdl)[-1,] %>% as.matrix() %>% abs())
ret <- rank(-tmp, ties.method = ties)
colnames(ret) <- paste('Lambda_',k,' Alpha_',i, sep = '')
rownames(ret) <- rownames(coef(mdl)[-1,] %>% as.matrix())
ret
}
}
res <- if(scale & ties=='max') {
temp <- rownames(res)
res <- sapply(res[,1:length(res[1,])],function(data){
(data - min(data))
}) %>% as.data.frame()
rownames(res) <- temp
res
} else res
if(is.null(file_out)) res else {
file <- paste(file_out, '_C_RANKS.csv', sep='')
write.csv(res, file = file, row.names = T)
}
}
res <- rank_coefs(train_x, train_y, ties = 'max', scale = F)
train_x
######################################################################################
############    For presentation/testing    ##########################################
######################################################################################
ds <- read.csv('../data/dataset_y_oat_v1.csv')
target <- 'production'
idVars <- c('ELY','Year')
omit <- names(ds)[c(65:68)]
train_x <- ds %>% select(-target,-idVars,-omit)   # training with everything here
train_y <- ds %>% select(target) %>% log()
names(train_x)
names(train_y)
res <- rank_coefs(train_x, train_y, ties = 'max', scale = F)
res <- rank_coefs(train_x, train_y, ties = 'max', scale = F, alphas = c(0,.25,.5,.75,1))
################### Function for ranking model coefficient for different pairs (alpha, lambda) ###################
rank_coefs <- function(df_x, df_y, alphas = NULL, lambdas = NULL, ties = 'min', scale = T, file_out = NULL, folds = 10) {
#' @title Function for calculating ranks for glmnet models.
#' @description Ranks glmnet model coefficients. If ties == 'max' & scale == TRUE, the results are scaled so as to
#' make zero coefficients have rank zero, and the most significant coefficient have the rank equaling the number of non-zero coeffs.
#' @param df_x/df_y Clean data frames or matrices.
#' @param alphas Values of elasticnet metaparam. If no values are provided, cv is used to find
#' a value.
#' @param lambdas Values for elasticnet param. for shrinkage. Defaults to cv {0, min, 1se}.
#' @param ties How rank( ) function should handle ties.
#' @param scale If ties == max, scale decides whether or not the results are scaled so that least values -> 0.
#' @param file_out Name tag for .csv file where the results are saved.
#' @return Data frame of ranks, or outputs to a file.
x <- if(is.data.frame(df_x)) df_x %>% as.matrix() else df_x
y <- if(is.data.frame(df_y)) df_y %>% as.matrix() else df_y
alphas <- if(is.null(alphas)) {
require(glmnetUtils)
cat('Using cva.glmnet for finding alpha. Criteria used: min(cvm).')
fit <- cva.glmnet(x, y)
min <- Inf
ind <- NULL
for (i in 1:length(fit$modlist)) {
new <- min(fit$modlist[[i]]$cvm)
if(new<min) {
min <- new
ind <- i
}
}
fit$alpha[ind]
} else alphas
res <- foreach(i=alphas, .combine = 'cbind') %do% {
cv.fit <- cv.glmnet(x, y, alpha = i, nfolds = folds)
l <- if(is.null(lambdas)) {
c(0, cv.fit$lambda.min, cv.fit$lambda.1se)
} else if(is.integer(lambdas) & length(lambdas)<=3) {
c(0, cv.fit$lambda.min, cv.fit$lambda.1se)[lambdas]
} else lambdas
foreach(k=l, .combine = 'cbind') %do% {
mdl <- glmnet(x,y,alpha=i, lambda=k)
tmp <- coef(mdl)[-1,] %>% as.matrix() %>% abs()
ret <- rank(-tmp, ties.method = ties) %>% as.data.frame()
colnames(ret) <- paste('Lambda_',k,' Alpha_',i, sep = '')
rownames(ret) <- rownames(coef(mdl)[-1,] %>% as.matrix())
ret
}
}
res <- if(scale & ties=='max') {
temp <- rownames(res)
res <- sapply(res[,1:length(res[1,])],function(data){
(data - min(data))
}) %>% as.data.frame()
rownames(res) <- temp
res
} else res
if(is.null(file_out)) res else {
file <- paste(file_out, '_C_RANKS.csv', sep='')
write.csv(res, file = file, row.names = T)
}
}
res <- rank_coefs(train_x, train_y, ties = 'max', scale = F, alphas = c(0,.25,.5,.75,1))
res
getwd()
write.csv(res,'SA_results/ALLCOEFFS_new.csv')
res <- rank_coefs(train_x, train_y, ties = 'max', scale = T, alphas = c(0,.25,.5,.75,1))
res
res <- rank_coefs(train_x, train_y, ties = 'min', alphas = c(0,.25,.5,.75,1))
res
rank_sobol <- function(ss, ties = 'min', coef_names = NULL, scale = T, file_out = NULL) {
#' @title Function for calculating ranks for sobol indices, such as they are when produced by SA_sobol.
#' @description rank_sobol works in a similar way as rank_coefs, but needs SA_sobol$data as input.
#' @param coef_names An additional parameter for choosing either subsets or changing the order of variables.
#' This might be useful if SA_sobol is originally run with different ordering for plotting/subsetting purposes.
#' @return Data frame of ranks, or outputs to separate files for 1st and total order inices.
if(is.character(ss)) ss <- read.csv(ss)
if(is.null(coef_names)) coef_names <- names(ss)[-c(1,2)]
dss <- apply(ss[,coef_names] %>% abs(),1,
function(data) {
r <- rank(-data, ties.method = ties)
}) %>% as.data.frame()
colnames(dss) <- paste(ss$Index, ss$Lambda)
if(is.null(file_out)) dss else {
file_1 <- paste(file_out, '_S1_RANKS.csv', sep='')
file_2 <- paste(file_out, '_ST_RANKS.csv', sep='')
ind <- 1:ncol(dss)
ds1 <- dss[,-which(ind%%2==0)]
ds2 <- dss[,which(ind%%2==0)]
write.csv(ds1, file = file_1, row.names = T)
write.csv(ds2, file = file_2, row.names = T)
}
}
ss <- rank_sobol('SA_results/0.5_Sobol_2000.csv')
ss
ss <- rank_sobol('SA_results/0.5_Sobol_2000.csv','max')
ss
rank_sobol <- function(ss, ties = 'max', coef_names = NULL, file_out = NULL) {
#' @title Function for calculating ranks for sobol indices, such as they are when produced by SA_sobol.
#' @description rank_sobol works in a similar way as rank_coefs, but needs SA_sobol$data as input.
#' @param coef_names An additional parameter for choosing either subsets or changing the order of variables.
#' This might be useful if SA_sobol is originally run with different ordering for plotting/subsetting purposes.
#' @return Data frame of ranks, or outputs to separate files for 1st and total order inices.
if(is.character(ss)) ss <- read.csv(ss)
if(is.null(coef_names)) coef_names <- names(ss)[-c(1,2)]
dss <- apply(ss[,coef_names] %>% abs(),1,
function(data) {
r <- rank(-data, ties.method = ties)
}) %>% as.data.frame()
colnames(dss) <- paste(ss$Index, ss$Lambda)
if(is.null(file_out)) dss else {
if(file_out=='input') file_out <- strsplit(data_in,'.csv')[[1]]
file_1 <- paste(file_out, '_S1_RANKS.csv', sep='')
file_2 <- paste(file_out, '_ST_RANKS.csv', sep='')
ind <- 1:ncol(dss)
ds1 <- dss[,-which(ind%%2==0)]
ds2 <- dss[,which(ind%%2==0)]
write.csv(ds1, file = file_1, row.names = T)
write.csv(ds2, file = file_2, row.names = T)
}
}
ss <- rank_sobol('SA_results/0.5_Sobol_2000.csv','max', file_out = 'input')
rank_sobol <- function(ss, ties = 'max', coef_names = NULL, file_out = NULL) {
#' @title Function for calculating ranks for sobol indices, such as they are when produced by SA_sobol.
#' @description rank_sobol works in a similar way as rank_coefs, but needs SA_sobol$data as input.
#' @param coef_names An additional parameter for choosing either subsets or changing the order of variables.
#' This might be useful if SA_sobol is originally run with different ordering for plotting/subsetting purposes.
#' @return Data frame of ranks, or outputs to separate files for 1st and total order inices.
if(is.character(ss)) {
file_in <- ss
ss <- read.csv(ss)
}
if(is.null(coef_names)) coef_names <- names(ss)[-c(1,2)]
dss <- apply(ss[,coef_names] %>% abs(),1,
function(data) {
r <- rank(-data, ties.method = ties)
}) %>% as.data.frame()
colnames(dss) <- paste(ss$Index, ss$Lambda)
if(is.null(file_out)) dss else {
if(file_out=='input') file_out <- strsplit(file_in,'.csv')[[1]]
file_1 <- paste(file_out, '_S1_RANKS.csv', sep='')
file_2 <- paste(file_out, '_ST_RANKS.csv', sep='')
ind <- 1:ncol(dss)
ds1 <- dss[,-which(ind%%2==0)]
ds2 <- dss[,which(ind%%2==0)]
write.csv(ds1, file = file_1, row.names = T)
write.csv(ds2, file = file_2, row.names = T)
}
}
ss <- rank_sobol('SA_results/0.5_Sobol_2000.csv','max', file_out = 'input')
ss
rank_sobol('SA_results/0_Sobol_2000.csv','max', file_out = 'input')
rank_sobol('SA_results/0.25_Sobol_2000.csv','max', file_out = 'input')
rank_sobol('SA_results/0.75_Sobol_2000.csv','max', file_out = 'input')
rank_sobol('SA_results/1_Sobol_2000.csv','max', file_out = 'input')
rank_sobol('SA_results/ols_Sobol_2000.csv','max', file_out = 'input')
A0LminS1 <- read.csv('SA_results/0_Sobol_2000_S1_RANKS.csv.csv')[,1]
getwd()
A0LminS1 <- read.csv('SA_results/0_Sobol_2000_S1_RANKS.csv')[,1]
A0LminS1
A0 <- read.csv('SA_results/0_Sobol_2000_S1_RANKS.csv')
A0.25 <- read.csv('SA_results/0.25_Sobol_2000_S1_RANKS.csv')
A0.5 <- read.csv('SA_results/0.5_Sobol_2000_S1_RANKS.csv')
A0.75 <- read.csv('SA_results/0.75_Sobol_2000_S1_RANKS.csv')
A1 <- read.csv('SA_results/1_Sobol_2000_S1_RANKS.csv')
Lmin <- cbind(A0[,2],A0.25[,2],A0.5[,2],A0.75[,2],A1[,2])
Lmin
Lmin <- Lmin %>% as.data.frame()
names(Lmin) <- A0[,1]
A0[,1]
Lmin[,1]
row.names(Lmin) <- A0[,1]
Lmin
Lmin <- data.frame(A0,A0.25)
Lmin
Lmin <- data.frame(A0[,1:2],A0.25[,1:2])
Lmin
Lmin
View(Lmin)
Lmin <- data.frame(A0[,1:2],A0.25[,2],A0.5[,2],A0.75[,2],A1[,2])
names(Lmin)
row.names(Lmin) <- NULL
Lmin
A0
A0 <- read.csv('SA_results/0_Sobol_2000_S1_RANKS.csv',row.names = 1)
A0
A0.25 <- read.csv('SA_results/0.25_Sobol_2000_S1_RANKS.csv',row.names = 1)
A0.5 <- read.csv('SA_results/0.5_Sobol_2000_S1_RANKS.csv', row.names = 1)
A0.75 <- read.csv('SA_results/0.75_Sobol_2000_S1_RANKS.csv', row.names = 1)
A1 <- read.csv('SA_results/1_Sobol_2000_S1_RANKS.csv',row.names = 1)
A0
Lmin <- data.frame(A0,A0.25[,2:3])
Lmin <- data.frame(A0,A0.25)
Lmin <- data.frame(A0[,1:2],A0.25[,2])
Lmin <- data.frame(A0[,1],A0.25[,1])
Lmin <- data.frame(A0[,1],A0.25[,1])
Lmin <- data.frame(A0[,1],A0.25[,1],,A0.5[,1],A0.75[,1],A1[,1])
Lmin <- data.frame(A0[,1],A0.25[,1],A0.5[,1],A0.75[,1],A1[,1])
rownames(Lmin) <- row.names(A0)
write(Lmin, 'SA_results/RANKS_Lmin.csv')
write(x=Lmin, file='SA_results/RANKS_Lmin.csv')
class(Lmin)
write(x=Lmin, file='SA_results/RANKS_Lmin.csv',ncolumns = 6)
write.csv(x=Lmin, file='SA_results/RANKS_Lmin.csv')
L1se <- data.frame(A0[,2],A0.25[,2],A0.5[,2],A0.75[,2],A1[,2])
L1se
rownames(L1se) <- row.names(A0)
write.csv(x=L1se, file='SA_results/RANKS_L1se.csv')
ALL <- data.frame(A0,A0.25,A0.5,A0.75,A1)
ALL
View(ALL)
write.csv(x=ALL, file='SA_results/ALL_S1_RANKS.csv')
write.csv(x=L1se, file='SA_results/Lambda_1se_S1_RANKS.csv')
write.csv(x=Lmin, file='SA_results/Lambda_min_S1_RANKS.csv')
A0 <- read.csv('SA_results/0_Sobol_2000_ST_RANKS.csv',row.names = 1)
A0.25 <- read.csv('SA_results/0.25_Sobol_2000_ST_RANKS.csv',row.names = 1)
A0.5 <- read.csv('SA_results/0.5_Sobol_2000_ST_RANKS.csv',row.names = 1)
A0.75 <- read.csv('SA_results/0.75_Sobol_2000_ST_RANKS.csv',row.names = 1)
A1 <- read.csv('SA_results/1_Sobol_2000_ST_RANKS.csv',row.names = 1)
ALL <- data.frame(A0,A0.25,A0.5,A0.75,A1)
write.csv(x=ALL, file='SA_results/ALL_ST_RANKS.csv')
Lmin <- data.frame(A0[,1],A0.25[,1],A0.5[,1],A0.75[,1],A1[,1])
L1se <- data.frame(A0[,2],A0.25[,2],A0.5[,2],A0.75[,2],A1[,2])
write.csv(x=Lmin, file='SA_results/Lambda_min_ST_RANKS.csv')
write.csv(x=L1se, file='SA_results/Lambda_1se_ST_RANKS.csv')
write.csv(x=L1se, file='SA_results/Lambda_1se_ST_RANKS.csv', row.names = T)
write.csv(x=Lmin, file='SA_results/Lambda_min_ST_RANKS.csv',row.names = T)
ALL_S1 <- read.csv('SA_results/compiled_ranks/ALL_S1_RANKS.csv')
AA_s1
ALL_S1
ALL_S1 <- read.csv('SA_results/compiled_ranks/ALL_S1_RANKS.csv',row.names = 1)
ALL_S1
res <- rank_coefs(train_x,train_y,alphas = c(0,0.25,.5,.75,1),ties='max')
res
res <- rank_coefs(train_x,train_y,alphas = c(0,0.25,.5,.75,1))
res
res <- rank_coefs(train_x,train_y,alphas = c(0,0.25,.5,.75,1),ties='max', scale = F)
res
write.csv(res,'SA_results/ALLCOEF_RANKS.csv', row.names = T)
res <- rank_coefs(train_x,train_y,alphas = c(0,0.25,.5,.75,1),ties='max', scale = F, lambdas = c(2))
write.csv(res,'SA_results/Lambda_min_COEF_RANKS.csv', row.names = T)
res <- rank_coefs(train_x,train_y,alphas = c(0,0.25,.5,.75,1),ties='max', scale = F, lambdas = c(3))
write.csv(res,'SA_results/Lambda_1se_COEF_RANKS.csv', row.names = T)
train_y
Lmin_ranks <- read.csv('SA_results/compiled_ranks/Lambda_min_S1_RANKS.csv',row.names = T)
Lmin_ranks <- read.csv('SA_results/compiled_ranks/Lambda_min_S1_RANKS.csv',row.names = 1)
Lmin_ranks
Lmin_S1_ranks <- read.csv('SA_results/compiled_ranks/Lambda_min_S1_RANKS.csv',row.names = 1)
Lmin_coef_ranks <- read.csv('SA_results/compiled_ranks/Lambda_min_COEF_RANKS.csv',row.names = 1)
Lmin_coef_ranks
res <- rank_coefs(train_x,train_y,alphas = c(0,0.25,.5,.75,1),ties='max', scale = F, lambdas = as.integer(2))
res
write.csv(res,'SA_results/Lambda_min_COEF_RANKS.csv', row.names = T)
res <- rank_coefs(train_x,train_y,alphas = c(0,0.25,.5,.75,1),ties='max', scale = F, lambdas = as.integer(3))
write.csv(res,'SA_results/Lambda_1se_COEF_RANKS.csv', row.names = T)
Lmin_coef_ranks <- read.csv('SA_results/compiled_ranks/Lambda_min_COEF_RANKS.csv',row.names = 1)
Lmin_coef_ranks
Lmin_coef_ranks - Lmin_S1_ranks
coef_S1_RANK_DIFF <- Lmin_coef_ranks - Lmin_S1_ranks
write.csv(coef_S1_RANK_DIFF,'SA_results/compiled_ranks/coef_S1_Lmabda_min_RANK_DIFF.csv',row.names = T)
write.csv(coef_S1_RANK_DIFF,'SA_results/compiled_ranks/coef_S1_Lambda_min_RANK_DIFF.csv',row.names = T)
names(Lmin_S1_ranks)
names(Lmin_coef_ranks)
L1se_coef_ranks <- read.csv('SA_results/compiled_ranks/Lambda_1se_COEF_RANKS.csv',row.names = 1)
L1se_S1_ranks <- read.csv('SA_results/compiled_ranks/Lambda_1se_S1_RANKS.csv',row.names = 1)
L1se_coef_S1_RANK_DIFF <- L1se_coef_ranks-L1se_S1_ranks
write.csv(L1se_coef_S1_RANK_DIFF,'SA_results/compiled_ranks/coef_S1_Lambda_1se_RANK_DIFF.csv',row.names = T)
write.csv(L1se_coef_S1_RANK_DIFF %>% abs(),'SA_results/compiled_ranks/coef_S1_Lambda_1se_ABS_RANK_DIFF.csv',row.names = T)
write.csv(coef_S1_RANK_DIFF %>% abs(),'SA_results/compiled_ranks/coef_S1_Lambda_min_ABS_RANK_DIFF.csv',row.names = T)
